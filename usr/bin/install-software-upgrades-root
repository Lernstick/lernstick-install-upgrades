#!/bin/bash

# This script REALLY has to run via bash instead of sh because
# we use read with the option "-t", which doesn't work with sh.

# support for i18n and L10n
. gettext.sh
export TEXTDOMAIN=install-software-upgrades

RED="31"
BOLD_RED="\e[1;${RED}m"

echo -e "${BOLD_RED}$(gettext "Don't close this window!")"
echo -e "${BOLD_RED}$(gettext "Please wait until all upgrades have been installed...")"

auplink_check()
{
	# check if auplink is necessary and possible
	if grep -q "aufs / aufs" /proc/mounts
	then
		if [ ! -e /sbin/auplink ]
		then
			echo "$(gettext "WARNING: /sbin/auplink not found. Can't clean up file system. Please install the package \"aufs-tools\".\nPress ENTER to continue...")"
			read blah
		fi
	fi
}

cleanup_fs_and_cache()
{
	# FIXME:
	# auplink flushing crashes much too often (between 5-10 % of all test runs
	# crashed the kernel).
	# Therefore we leave out the auplink part for the time being...

	## clean up aufs pseudo links
	#if grep -q "aufs / aufs" /proc/mounts
	#then
	#	if [ -e /sbin/auplink ]
	#	then
	#		echo "$(gettext "Cleaning up file system, please wait...")"
	#		/sbin/auplink / flush
	#	fi
	#fi

	# empty the package cache
	apt-get clean
}

countdown() {
	secs=$1
	while [ $secs -gt 0 ]; do
		echo -ne "Countdown: $secs\033[0K\r"
		secs=$((secs-1))

		read -t 1 -n 1 key
		RETURN_OF_READ=$?

		if [ $RETURN_OF_READ -eq 0 ]; then
			echo "$(gettext "Key press detected. Window is not closed automatically.")"
			while true
			do
				sleep 1
			done
		fi
	done
}

# FIXME:
# as stated above, auplink is too crashy, therefore disabled for now...
## cleanup before and after installing upgrades
#auplink_check

cleanup_fs_and_cache

nala upgrade -y

cleanup_fs_and_cache

get_nvidia_versions() {
	PACKAGE_PATTERN=$1
	echo "$(dpkg -l "$PACKAGE_PATTERN" | grep ^ii | awk {' print $3 '} | sed "s/\(.*\)-.*/\1/g" | sed "s/\./-/g")"
}

# TODO: This seems to be no longer needed, as the nvidia driver
# is pinned during the build process...
sync_nvidia_flatpak() {
	for NVIDIA_VERSION in $(get_nvidia_versions "nvidia-driver") $(get_nvidia_versions "nvidia-legacy-*xx-driver")
	do
		if ! flatpak list | grep -q org.freedesktop.Platform.GL.nvidia-${NVIDIA_VERSION}
		then
			flatpak install -y org.freedesktop.Platform.GL.nvidia-${NVIDIA_VERSION}
		fi
	done
}

if command -v flatpak > /dev/null
then
	flatpak --noninteractive update
	# For some (so far unknown) reasons the installation of an nvidia flatpak
	# driver sometimes fails at the first attempt but works fine when trying
	# again. Therefore we run sync_nvidia_flatpak twice here.
	sync_nvidia_flatpak
	sync_nvidia_flatpak
fi

TIMEOUT=10
echo "$(eval_gettext "This window will be closed automatically in \$TIMEOUT seconds.")"
echo "$(gettext "Press any key to keep this window open.")"
countdown $TIMEOUT
